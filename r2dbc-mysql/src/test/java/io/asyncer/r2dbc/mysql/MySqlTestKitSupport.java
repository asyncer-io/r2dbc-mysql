/*
 * Copyright 2023 asyncer.io projects
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.asyncer.r2dbc.mysql;

import com.zaxxer.hikari.HikariDataSource;
import io.asyncer.r2dbc.mysql.internal.NodeAddress;
import io.r2dbc.spi.test.TestKit;
import org.springframework.jdbc.core.JdbcTemplate;

import java.time.Duration;
import java.util.Optional;

/**
 * Base class considers integration tests of {@link TestKit}.
 */
abstract class MySqlTestKitSupport implements TestKit<String> {

    private final MySqlConnectionFactory connectionFactory;

    private final JdbcTemplate jdbcOperations;

    MySqlTestKitSupport(MySqlConnectionConfiguration configuration) {
        this.connectionFactory = MySqlConnectionFactory.from(configuration);
        this.jdbcOperations = jdbc(configuration);
    }

    @Override
    public MySqlConnectionFactory getConnectionFactory() {
        return connectionFactory;
    }

    @Override
    public JdbcTemplate getJdbcOperations() {
        return jdbcOperations;
    }

    @Override
    public String doGetSql(TestStatement statement) {
        switch (statement) {
            case CREATE_TABLE_AUTOGENERATED_KEY:
                return "CREATE TABLE test (id INT PRIMARY KEY AUTO_INCREMENT, value INT)";
            case INSERT_VALUE_AUTOGENERATED_KEY:
                return "INSERT INTO test VALUES (DEFAULT,100)";
            default:
                return statement.getSql();
        }
    }

    @Override
    public String getIdentifier(int index) {
        return "v" + index;
    }

    @Override
    public String getPlaceholder(int index) {
        return "?v" + index;
    }

    @Override
    public String clobType() {
        return "TEXT";
    }

    private static JdbcTemplate jdbc(MySqlConnectionConfiguration configuration) {
        TcpSocketConfiguration socket = (TcpSocketConfiguration) configuration.getSocket();
        NodeAddress address = socket.getFirstAddress();
        Credential credential = configuration.getCredential().blockOptional().orElseThrow(() ->
            new IllegalStateException("Credential must be present"));
        HikariDataSource source = new HikariDataSource();

        source.setJdbcUrl(String.format("jdbc:mysql://%s:%d/%s",
            address.getHost(), address.getPort(), configuration.getDatabase()));
        source.setUsername(credential.getUser());
        source.setPassword(Optional.ofNullable(credential.getPassword())
            .map(Object::toString).orElse(null));
        source.setMaximumPoolSize(1);
        source.setConnectionTimeout(Optional.ofNullable(configuration.getClient().getConnectTimeout())
            .map(Duration::toMillis).orElse(0L));

        source.addDataSourceProperty("preserveInstants", configuration.isPreserveInstants());
        source.addDataSourceProperty("connectionTimeZone", configuration.getConnectionTimeZone());
        source.addDataSourceProperty("forceConnectionTimeZoneToSession",
            configuration.isForceConnectionTimeZoneToSession());

        return new JdbcTemplate(source);
    }
}
